# -*- coding: utf-8 -*-
"""Lab_5.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1GFPd5PQPjDimGJdDWnMXHZ2jIeDJXvqo
"""



"""Rollno#20sw002

Task#01

import pandas as pd

# Create a Pandas Series that contains the distance of some planets from the Sun.

# Use the name of the planets as the index to your Pandas Series, and the distance

# from the Sun as your data. The distance from the Sun is in units of 10^6 km

distance_from_sun = [149.6, 1433.5, 227.9, 108.2, 778.6]

planets = ['Earth','Saturn', 'Mars','Venus', 'Jupiter']

# Create a Pandas Series using the above data, with the name of the planets as

# the index and the distance from the Sun as your data.

dist_planets =

# Calculate the number of minutes it takes sunlight to reach each planet. You can

# do this by dividing the distance from the Sun for each planet by the speed of light.

# Since in the data above the distance from the Sun is in units of 10^6 km, you can

# use a value for the speed of light of c = 18, since light travels 18 x 10^6 km/minute.

time_light =

# Use Boolean indexing to select only those planets for which sunlight takes less

# than 40 minutes to reach them.
"""

import pandas as pd

distance_from_sun = [149.6, 1433.5, 227.9, 108.2, 778.6]

planets = ['Earth', 'Saturn', 'Mars', 'Venus', 'Jupiter']

dist_planets = pd.Series(data=distance_from_sun, index=planets)

speed_of_light = 18  # in 10^6 km/minute

time_light = dist_planets / speed_of_light

fast_sunlight_planets = time_light[time_light < 40]

print("Distance from Sun (in 10^6 km):")
print(dist_planets)
print("\nTime for sunlight to reach each planet (in minutes):")
print(time_light)
print("\nPlanets with sunlight travel time less than 40 minutes:")
print(fast_sunlight_planets)



"""Task # 02
import pandas as pd

import numpy as np

# Since we will be working with ratings, we will set the precision of our

# dataframes to one decimal place.

pd.set_option('precision', 1)

# Create a Pandas DataFrame that contains the ratings some users have given to a

# series of books. The ratings given are in the range from 1 to 5, with 5 being

# the best score. The names of the books, the authors, and the ratings of each user

# are given below:

books = pd.Series(data = ['Great Expectations', 'Of Mice and Men', 'Romeo and Juliet', 'The Time Machine', 'Alice in Wonderland' ])

authors = pd.Series(data = ['Charles Dickens', 'John Steinbeck', 'William Shakespeare', ' H. G. Wells', 'Lewis Carroll' ])

user_1 = pd.Series(data = [3.2, np.nan ,2.5])

user_2 = pd.Series(data = [5., 1.3, 4.0, 3.8])

user_3 = pd.Series(data = [2.0, 2.3, np.nan, 4])

user_4 = pd.Series(data = [4, 3.5, 4, 5, 4.2])

# Users that have np.nan values means that the user has not yet rated that book.

# Use the data above to create a Pandas DataFrame that has the following column

# labels: 'Author', 'Book Title', 'User 1', 'User 2', 'User 3', 'User 4'. Let Pandas

# automatically assign numerical row indices to the DataFrame.

# Create a dictionary with the data given above

dat =

# Use the dictionary to create a Pandas DataFrame

book_ratings =

# If you created the dictionary correctly you should have a Pandas DataFrame

# that has column labels: 'Author', 'Book Title', 'User 1', 'User 2', 'User 3',

# 'User 4' and row indices 0 through 4.

# Now replace all the NaN values in your DataFrame with the average rating in

# each column. Replace the NaN values in place. HINT: you can use the fillna()

# function with the keyword inplace = True, to do this. Write your code below:

INSTRUCTOR NOTE:

From the DataFrame above you can now pick all the books that had a rating of 5. You can do this in just one line of code. Try to do it yourself first, you'll find the answer below:

best_rated = book_ratings[(book_ratings == 5).any(axis = 1)]['Book Title'].values

The code above returns a NumPy ndarray that only contains the names of the books that had a rating of 5
"""

import pandas as pd
import numpy as np

# Set precision
pd.set_option('display.precision', 1)

# Create data
books = pd.Series(data=['Great Expectations', 'Of Mice and Men', 'Romeo and Juliet', 'The Time Machine', 'Alice in Wonderland'])
authors = pd.Series(data=['Charles Dickens', 'John Steinbeck', 'William Shakespeare', ' H. G. Wells', 'Lewis Carroll'])
user_1 = pd.Series(data=[3.2, np.nan, 2.5, np.nan, np.nan])
user_2 = pd.Series(data=[5., 1.3, 4.0, 3.8, np.nan])
user_3 = pd.Series(data=[2.0, 2.3, np.nan, 4, 4.5])
user_4 = pd.Series(data=[4, 3.5, 4, 5, 4.2])

# Create dictionary
dat = {
    'Author': authors,
    'Book Title': books,
    'User 1': user_1,
    'User 2': user_2,
    'User 3': user_3,
    'User 4': user_4
}

# Create DataFrame
book_ratings = pd.DataFrame(dat)

# Calculate column-wise averages and replace NaN values
column_averages = book_ratings.mean()
book_ratings.fillna(column_averages, inplace=True)

# Print the updated DataFrame
print(book_ratings)

# Find books with a rating of 5
best_rated = book_ratings[book_ratings[['User 1', 'User 2', 'User 3', 'User 4']] == 5].dropna()['Book Title'].values
print("Best rated books:", best_rated)